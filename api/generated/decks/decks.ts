/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Flash Cards API
 * API documentation for the Flash Cards application
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/vue-query';
import type {
  DataTag,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType
} from '@tanstack/vue-query';

import {
  computed,
  unref
} from 'vue';
import type {
  MaybeRef
} from 'vue';

import type {
  CreateDeckDto,
  DeckResponse,
  UpdateDeckDto
} from '../flashCardsAPI.schemas';

import deckControllerCreateMutator from '../../fetchWithAuth';
import deckControllerFindAllMutator from '../../fetchWithAuth';
import deckControllerFindBySubjectMutator from '../../fetchWithAuth';
import deckControllerFindOneMutator from '../../fetchWithAuth';
import deckControllerUpdateMutator from '../../fetchWithAuth';
import deckControllerRemoveMutator from '../../fetchWithAuth';




/**
 * @summary Create a new deck
 */
export const deckControllerCreate = (
    createDeckDto: MaybeRef<CreateDeckDto>,
 signal?: AbortSignal
) => {
      createDeckDto = unref(createDeckDto);
      
      return deckControllerCreateMutator<DeckResponse>(
      {url: `/deck`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createDeckDto, signal
    },
      );
    }
  


export const getDeckControllerCreateMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deckControllerCreate>>, TError,{data: CreateDeckDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deckControllerCreate>>, TError,{data: CreateDeckDto}, TContext> => {

const mutationKey = ['deckControllerCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deckControllerCreate>>, {data: CreateDeckDto}> = (props) => {
          const {data} = props ?? {};

          return  deckControllerCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeckControllerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof deckControllerCreate>>>
    export type DeckControllerCreateMutationBody = CreateDeckDto
    export type DeckControllerCreateMutationError = void

    /**
 * @summary Create a new deck
 */
export const useDeckControllerCreate = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deckControllerCreate>>, TError,{data: CreateDeckDto}, TContext>, }
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof deckControllerCreate>>,
        TError,
        {data: CreateDeckDto},
        TContext
      > => {

      const mutationOptions = getDeckControllerCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get all decks for the authenticated user
 */
export const deckControllerFindAll = (
    
 signal?: AbortSignal
) => {
      
      
      return deckControllerFindAllMutator<DeckResponse[]>(
      {url: `/deck`, method: 'GET', signal
    },
      );
    }
  

export const getDeckControllerFindAllQueryKey = () => {
    return ['deck'] as const;
    }

    
export const getDeckControllerFindAllQueryOptions = <TData = Awaited<ReturnType<typeof deckControllerFindAll>>, TError = void>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof deckControllerFindAll>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  getDeckControllerFindAllQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof deckControllerFindAll>>> = ({ signal }) => deckControllerFindAll(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof deckControllerFindAll>>, TError, TData> 
}

export type DeckControllerFindAllQueryResult = NonNullable<Awaited<ReturnType<typeof deckControllerFindAll>>>
export type DeckControllerFindAllQueryError = void


/**
 * @summary Get all decks for the authenticated user
 */

export function useDeckControllerFindAll<TData = Awaited<ReturnType<typeof deckControllerFindAll>>, TError = void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof deckControllerFindAll>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDeckControllerFindAllQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}



/**
 * @summary Get decks by subject ID for the authenticated user
 */
export const deckControllerFindBySubject = (
    subjectId: MaybeRef<string>,
 signal?: AbortSignal
) => {
      subjectId = unref(subjectId);
      
      return deckControllerFindBySubjectMutator<DeckResponse[]>(
      {url: `/deck/subject/${subjectId}`, method: 'GET', signal
    },
      );
    }
  

export const getDeckControllerFindBySubjectQueryKey = (subjectId: MaybeRef<string>,) => {
    return ['deck','subject',subjectId] as const;
    }

    
export const getDeckControllerFindBySubjectQueryOptions = <TData = Awaited<ReturnType<typeof deckControllerFindBySubject>>, TError = void>(subjectId: MaybeRef<string>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof deckControllerFindBySubject>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  getDeckControllerFindBySubjectQueryKey(subjectId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof deckControllerFindBySubject>>> = ({ signal }) => deckControllerFindBySubject(subjectId, signal);

      

      

   return  { queryKey, queryFn, enabled: computed(() => !!(unref(subjectId))), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof deckControllerFindBySubject>>, TError, TData> 
}

export type DeckControllerFindBySubjectQueryResult = NonNullable<Awaited<ReturnType<typeof deckControllerFindBySubject>>>
export type DeckControllerFindBySubjectQueryError = void


/**
 * @summary Get decks by subject ID for the authenticated user
 */

export function useDeckControllerFindBySubject<TData = Awaited<ReturnType<typeof deckControllerFindBySubject>>, TError = void>(
 subjectId: MaybeRef<string>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof deckControllerFindBySubject>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDeckControllerFindBySubjectQueryOptions(subjectId,options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}



/**
 * @summary Get a specific deck by ID
 */
export const deckControllerFindOne = (
    id: MaybeRef<string>,
 signal?: AbortSignal
) => {
      id = unref(id);
      
      return deckControllerFindOneMutator<DeckResponse>(
      {url: `/deck/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getDeckControllerFindOneQueryKey = (id: MaybeRef<string>,) => {
    return ['deck',id] as const;
    }

    
export const getDeckControllerFindOneQueryOptions = <TData = Awaited<ReturnType<typeof deckControllerFindOne>>, TError = void>(id: MaybeRef<string>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof deckControllerFindOne>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  getDeckControllerFindOneQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof deckControllerFindOne>>> = ({ signal }) => deckControllerFindOne(id, signal);

      

      

   return  { queryKey, queryFn, enabled: computed(() => !!(unref(id))), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof deckControllerFindOne>>, TError, TData> 
}

export type DeckControllerFindOneQueryResult = NonNullable<Awaited<ReturnType<typeof deckControllerFindOne>>>
export type DeckControllerFindOneQueryError = void


/**
 * @summary Get a specific deck by ID
 */

export function useDeckControllerFindOne<TData = Awaited<ReturnType<typeof deckControllerFindOne>>, TError = void>(
 id: MaybeRef<string>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof deckControllerFindOne>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDeckControllerFindOneQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}



/**
 * @summary Update a specific deck by ID
 */
export const deckControllerUpdate = (
    id: MaybeRef<string>,
    updateDeckDto: MaybeRef<UpdateDeckDto>,
 ) => {
      id = unref(id);
updateDeckDto = unref(updateDeckDto);
      
      return deckControllerUpdateMutator<DeckResponse>(
      {url: `/deck/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: updateDeckDto
    },
      );
    }
  


export const getDeckControllerUpdateMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deckControllerUpdate>>, TError,{id: string;data: UpdateDeckDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deckControllerUpdate>>, TError,{id: string;data: UpdateDeckDto}, TContext> => {

const mutationKey = ['deckControllerUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deckControllerUpdate>>, {id: string;data: UpdateDeckDto}> = (props) => {
          const {id,data} = props ?? {};

          return  deckControllerUpdate(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeckControllerUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof deckControllerUpdate>>>
    export type DeckControllerUpdateMutationBody = UpdateDeckDto
    export type DeckControllerUpdateMutationError = void

    /**
 * @summary Update a specific deck by ID
 */
export const useDeckControllerUpdate = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deckControllerUpdate>>, TError,{id: string;data: UpdateDeckDto}, TContext>, }
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof deckControllerUpdate>>,
        TError,
        {id: string;data: UpdateDeckDto},
        TContext
      > => {

      const mutationOptions = getDeckControllerUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Delete a specific deck by ID
 */
export const deckControllerRemove = (
    id: MaybeRef<string>,
 ) => {
      id = unref(id);
      
      return deckControllerRemoveMutator<DeckResponse>(
      {url: `/deck/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeckControllerRemoveMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deckControllerRemove>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deckControllerRemove>>, TError,{id: string}, TContext> => {

const mutationKey = ['deckControllerRemove'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deckControllerRemove>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deckControllerRemove(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeckControllerRemoveMutationResult = NonNullable<Awaited<ReturnType<typeof deckControllerRemove>>>
    
    export type DeckControllerRemoveMutationError = void

    /**
 * @summary Delete a specific deck by ID
 */
export const useDeckControllerRemove = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deckControllerRemove>>, TError,{id: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof deckControllerRemove>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeckControllerRemoveMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    