/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Flash Cards API
 * API documentation for the Flash Cards application
 * OpenAPI spec version: 1.0
 */
import {
  useMutation
} from '@tanstack/vue-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationReturnType
} from '@tanstack/vue-query';

import {
  unref
} from 'vue';
import type {
  MaybeRef
} from 'vue';

import type {
  CreateUserDto,
  JwtResponse,
  LoginDto,
  RefreshDto,
  UserResponse
} from '../flashCardsAPI.schemas';

import authControllerRegisterMutator from '../../fetchWithAuth';
import authControllerLoginMutator from '../../fetchWithAuth';
import authControllerRefreshMutator from '../../fetchWithAuth';
import authControllerLogoutMutator from '../../fetchWithAuth';




/**
 * @summary Register a new user
 */
export const authControllerRegister = (
    createUserDto: MaybeRef<CreateUserDto>,
 signal?: AbortSignal
) => {
      createUserDto = unref(createUserDto);
      
      return authControllerRegisterMutator<UserResponse>(
      {url: `/auth/register`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createUserDto, signal
    },
      );
    }
  


export const getAuthControllerRegisterMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerRegister>>, TError,{data: CreateUserDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof authControllerRegister>>, TError,{data: CreateUserDto}, TContext> => {

const mutationKey = ['authControllerRegister'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authControllerRegister>>, {data: CreateUserDto}> = (props) => {
          const {data} = props ?? {};

          return  authControllerRegister(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthControllerRegisterMutationResult = NonNullable<Awaited<ReturnType<typeof authControllerRegister>>>
    export type AuthControllerRegisterMutationBody = CreateUserDto
    export type AuthControllerRegisterMutationError = void

    /**
 * @summary Register a new user
 */
export const useAuthControllerRegister = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerRegister>>, TError,{data: CreateUserDto}, TContext>, }
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof authControllerRegister>>,
        TError,
        {data: CreateUserDto},
        TContext
      > => {

      const mutationOptions = getAuthControllerRegisterMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Log in a user
 */
export const authControllerLogin = (
    loginDto: MaybeRef<LoginDto>,
 signal?: AbortSignal
) => {
      loginDto = unref(loginDto);
      
      return authControllerLoginMutator<JwtResponse>(
      {url: `/auth/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: loginDto, signal
    },
      );
    }
  


export const getAuthControllerLoginMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerLogin>>, TError,{data: LoginDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof authControllerLogin>>, TError,{data: LoginDto}, TContext> => {

const mutationKey = ['authControllerLogin'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authControllerLogin>>, {data: LoginDto}> = (props) => {
          const {data} = props ?? {};

          return  authControllerLogin(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthControllerLoginMutationResult = NonNullable<Awaited<ReturnType<typeof authControllerLogin>>>
    export type AuthControllerLoginMutationBody = LoginDto
    export type AuthControllerLoginMutationError = void

    /**
 * @summary Log in a user
 */
export const useAuthControllerLogin = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerLogin>>, TError,{data: LoginDto}, TContext>, }
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof authControllerLogin>>,
        TError,
        {data: LoginDto},
        TContext
      > => {

      const mutationOptions = getAuthControllerLoginMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Refresh access token
 */
export const authControllerRefresh = (
    refreshDto: MaybeRef<RefreshDto>,
 signal?: AbortSignal
) => {
      refreshDto = unref(refreshDto);
      
      return authControllerRefreshMutator<JwtResponse>(
      {url: `/auth/refresh`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: refreshDto, signal
    },
      );
    }
  


export const getAuthControllerRefreshMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerRefresh>>, TError,{data: RefreshDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof authControllerRefresh>>, TError,{data: RefreshDto}, TContext> => {

const mutationKey = ['authControllerRefresh'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authControllerRefresh>>, {data: RefreshDto}> = (props) => {
          const {data} = props ?? {};

          return  authControllerRefresh(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthControllerRefreshMutationResult = NonNullable<Awaited<ReturnType<typeof authControllerRefresh>>>
    export type AuthControllerRefreshMutationBody = RefreshDto
    export type AuthControllerRefreshMutationError = void

    /**
 * @summary Refresh access token
 */
export const useAuthControllerRefresh = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerRefresh>>, TError,{data: RefreshDto}, TContext>, }
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof authControllerRefresh>>,
        TError,
        {data: RefreshDto},
        TContext
      > => {

      const mutationOptions = getAuthControllerRefreshMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Log out a user
 */
export const authControllerLogout = (
    
 signal?: AbortSignal
) => {
      
      
      return authControllerLogoutMutator<void>(
      {url: `/auth/logout`, method: 'POST', signal
    },
      );
    }
  


export const getAuthControllerLogoutMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerLogout>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof authControllerLogout>>, TError,void, TContext> => {

const mutationKey = ['authControllerLogout'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authControllerLogout>>, void> = () => {
          

          return  authControllerLogout()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthControllerLogoutMutationResult = NonNullable<Awaited<ReturnType<typeof authControllerLogout>>>
    
    export type AuthControllerLogoutMutationError = unknown

    /**
 * @summary Log out a user
 */
export const useAuthControllerLogout = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerLogout>>, TError,void, TContext>, }
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof authControllerLogout>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getAuthControllerLogoutMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    