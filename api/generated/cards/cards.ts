/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Flash Cards API
 * API documentation for the Flash Cards application
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/vue-query';
import type {
  DataTag,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType
} from '@tanstack/vue-query';

import {
  computed,
  unref
} from 'vue';
import type {
  MaybeRef
} from 'vue';

import type {
  CardControllerUploadImage201,
  CardControllerUploadImageBody,
  CardResponse,
  CreateCardDto,
  UpdateCardDto
} from '../flashCardsAPI.schemas';

import cardControllerCreateMutator from '../../fetchWithAuth';
import cardControllerFindAllMutator from '../../fetchWithAuth';
import cardControllerFindOneMutator from '../../fetchWithAuth';
import cardControllerUpdateMutator from '../../fetchWithAuth';
import cardControllerRemoveMutator from '../../fetchWithAuth';
import cardControllerUploadImageMutator from '../../fetchWithAuth';




/**
 * @summary Create a new card
 */
export const cardControllerCreate = (
    createCardDto: MaybeRef<CreateCardDto>,
 signal?: AbortSignal
) => {
      createCardDto = unref(createCardDto);
      
      return cardControllerCreateMutator<CardResponse>(
      {url: `/card`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createCardDto, signal
    },
      );
    }
  


export const getCardControllerCreateMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof cardControllerCreate>>, TError,{data: CreateCardDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof cardControllerCreate>>, TError,{data: CreateCardDto}, TContext> => {

const mutationKey = ['cardControllerCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof cardControllerCreate>>, {data: CreateCardDto}> = (props) => {
          const {data} = props ?? {};

          return  cardControllerCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CardControllerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof cardControllerCreate>>>
    export type CardControllerCreateMutationBody = CreateCardDto
    export type CardControllerCreateMutationError = void

    /**
 * @summary Create a new card
 */
export const useCardControllerCreate = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof cardControllerCreate>>, TError,{data: CreateCardDto}, TContext>, }
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof cardControllerCreate>>,
        TError,
        {data: CreateCardDto},
        TContext
      > => {

      const mutationOptions = getCardControllerCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get all cards in a deck (owned by user)
 */
export const cardControllerFindAll = (
    deckId: MaybeRef<string>,
 signal?: AbortSignal
) => {
      deckId = unref(deckId);
      
      return cardControllerFindAllMutator<CardResponse[]>(
      {url: `/card/deck/${deckId}`, method: 'GET', signal
    },
      );
    }
  

export const getCardControllerFindAllQueryKey = (deckId: MaybeRef<string>,) => {
    return ['card','deck',deckId] as const;
    }

    
export const getCardControllerFindAllQueryOptions = <TData = Awaited<ReturnType<typeof cardControllerFindAll>>, TError = unknown>(deckId: MaybeRef<string>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof cardControllerFindAll>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  getCardControllerFindAllQueryKey(deckId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof cardControllerFindAll>>> = ({ signal }) => cardControllerFindAll(deckId, signal);

      

      

   return  { queryKey, queryFn, enabled: computed(() => !!(unref(deckId))), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof cardControllerFindAll>>, TError, TData> 
}

export type CardControllerFindAllQueryResult = NonNullable<Awaited<ReturnType<typeof cardControllerFindAll>>>
export type CardControllerFindAllQueryError = unknown


/**
 * @summary Get all cards in a deck (owned by user)
 */

export function useCardControllerFindAll<TData = Awaited<ReturnType<typeof cardControllerFindAll>>, TError = unknown>(
 deckId: MaybeRef<string>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof cardControllerFindAll>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCardControllerFindAllQueryOptions(deckId,options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}



/**
 * @summary Get a card by ID
 */
export const cardControllerFindOne = (
    id: MaybeRef<string>,
 signal?: AbortSignal
) => {
      id = unref(id);
      
      return cardControllerFindOneMutator<CardResponse>(
      {url: `/card/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getCardControllerFindOneQueryKey = (id: MaybeRef<string>,) => {
    return ['card',id] as const;
    }

    
export const getCardControllerFindOneQueryOptions = <TData = Awaited<ReturnType<typeof cardControllerFindOne>>, TError = void>(id: MaybeRef<string>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof cardControllerFindOne>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  getCardControllerFindOneQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof cardControllerFindOne>>> = ({ signal }) => cardControllerFindOne(id, signal);

      

      

   return  { queryKey, queryFn, enabled: computed(() => !!(unref(id))), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof cardControllerFindOne>>, TError, TData> 
}

export type CardControllerFindOneQueryResult = NonNullable<Awaited<ReturnType<typeof cardControllerFindOne>>>
export type CardControllerFindOneQueryError = void


/**
 * @summary Get a card by ID
 */

export function useCardControllerFindOne<TData = Awaited<ReturnType<typeof cardControllerFindOne>>, TError = void>(
 id: MaybeRef<string>, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof cardControllerFindOne>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ): UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCardControllerFindOneQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as UseQueryReturnType<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<QueryKey, TData, TError>;

  return query;
}



/**
 * @summary Update a card
 */
export const cardControllerUpdate = (
    id: MaybeRef<string>,
    updateCardDto: MaybeRef<UpdateCardDto>,
 ) => {
      id = unref(id);
updateCardDto = unref(updateCardDto);
      
      return cardControllerUpdateMutator<CardResponse>(
      {url: `/card/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: updateCardDto
    },
      );
    }
  


export const getCardControllerUpdateMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof cardControllerUpdate>>, TError,{id: string;data: UpdateCardDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof cardControllerUpdate>>, TError,{id: string;data: UpdateCardDto}, TContext> => {

const mutationKey = ['cardControllerUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof cardControllerUpdate>>, {id: string;data: UpdateCardDto}> = (props) => {
          const {id,data} = props ?? {};

          return  cardControllerUpdate(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CardControllerUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof cardControllerUpdate>>>
    export type CardControllerUpdateMutationBody = UpdateCardDto
    export type CardControllerUpdateMutationError = void

    /**
 * @summary Update a card
 */
export const useCardControllerUpdate = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof cardControllerUpdate>>, TError,{id: string;data: UpdateCardDto}, TContext>, }
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof cardControllerUpdate>>,
        TError,
        {id: string;data: UpdateCardDto},
        TContext
      > => {

      const mutationOptions = getCardControllerUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Delete a card
 */
export const cardControllerRemove = (
    id: MaybeRef<string>,
 ) => {
      id = unref(id);
      
      return cardControllerRemoveMutator<CardResponse>(
      {url: `/card/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getCardControllerRemoveMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof cardControllerRemove>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof cardControllerRemove>>, TError,{id: string}, TContext> => {

const mutationKey = ['cardControllerRemove'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof cardControllerRemove>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  cardControllerRemove(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CardControllerRemoveMutationResult = NonNullable<Awaited<ReturnType<typeof cardControllerRemove>>>
    
    export type CardControllerRemoveMutationError = void

    /**
 * @summary Delete a card
 */
export const useCardControllerRemove = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof cardControllerRemove>>, TError,{id: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof cardControllerRemove>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getCardControllerRemoveMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Upload image for card. If current card already has a saved image - previously added picture would be removed. 1 card - 1 image
 */
export const cardControllerUploadImage = (
    id: MaybeRef<string>,
    cardControllerUploadImageBody: MaybeRef<CardControllerUploadImageBody>,
 signal?: AbortSignal
) => {
      id = unref(id);
cardControllerUploadImageBody = unref(cardControllerUploadImageBody);
      const formData = new FormData();
formData.append(`file`, cardControllerUploadImageBody.file)

      return cardControllerUploadImageMutator<CardControllerUploadImage201>(
      {url: `/card/upload-image/${id}`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData, signal
    },
      );
    }
  


export const getCardControllerUploadImageMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof cardControllerUploadImage>>, TError,{id: string;data: CardControllerUploadImageBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof cardControllerUploadImage>>, TError,{id: string;data: CardControllerUploadImageBody}, TContext> => {

const mutationKey = ['cardControllerUploadImage'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof cardControllerUploadImage>>, {id: string;data: CardControllerUploadImageBody}> = (props) => {
          const {id,data} = props ?? {};

          return  cardControllerUploadImage(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CardControllerUploadImageMutationResult = NonNullable<Awaited<ReturnType<typeof cardControllerUploadImage>>>
    export type CardControllerUploadImageMutationBody = CardControllerUploadImageBody
    export type CardControllerUploadImageMutationError = unknown

    /**
 * @summary Upload image for card. If current card already has a saved image - previously added picture would be removed. 1 card - 1 image
 */
export const useCardControllerUploadImage = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof cardControllerUploadImage>>, TError,{id: string;data: CardControllerUploadImageBody}, TContext>, }
 , queryClient?: QueryClient): UseMutationReturnType<
        Awaited<ReturnType<typeof cardControllerUploadImage>>,
        TError,
        {id: string;data: CardControllerUploadImageBody},
        TContext
      > => {

      const mutationOptions = getCardControllerUploadImageMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    